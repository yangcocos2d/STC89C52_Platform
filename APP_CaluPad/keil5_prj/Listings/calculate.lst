C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE CALCULATE
OBJECT MODULE PLACED IN .\outHex\calculate.obj
COMPILER INVOKED BY: C:\Keil_v525\C51\BIN\C51.EXE ..\Calu\calculate.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(..\..\74HC57
                    -3;..\..\BUTTON;..\..\DS18B20;..\..\exti_interrupt;..\..\IIC;..\..\LCD1602;..\..\motor_encode;..\..\mystring;..\..\pcf859
                    -1;..\..\PWM;..\..\software_timer;..\..\TIMER;..\..\UART;..\..\AT24CXX;..\..\PCF8574;..\..\KeyBoard;..\Calu) DEBUG OBJECT
                    -EXTEND PRINT(.\Listings\calculate.lst) TABS(2) OBJECT(.\outHex\calculate.obj)

line level    source

   1          /*
   2          C语言科学计算器(控制台字符界面)
   3          
   4          */
   5          
   6          #include <stdio.h>
   7          #include <string.h>
   8          #include <stdlib.h>
   9          #include "calculate.h"
  10          
  11          #define NUM_MAX_LEN             15  //操作数最大长度 
  12          #define EQUATION_MAX_LEN        100 //表达式最大长度 
  13            
  14          typedef struct st_bracket_index 
  15          { 
  16             int left_bracket_index;
  17             int right_bracket_index;
  18          }st_bracket_index; 
  19          
  20          st_bracket_index search_inlayer_left_bracket(char *equation)
  21          {
  22   1        int i = 0; 
  23   1        st_bracket_index st_bracket_index_ret = {-1,-1}; 
  24   1      
  25   1        while(equation[i]!=0) 
  26   1        { 
  27   2          if(equation[i] == '(') 
  28   2          {
  29   3            st_bracket_index_ret.left_bracket_index = i; 
  30   3          }
  31   2          if(equation[i] == ')') 
  32   2          {
  33   3            st_bracket_index_ret.right_bracket_index = i; 
  34   3            break; 
  35   3          }
  36   2          i++; 
  37   2        }
  38   1        return st_bracket_index_ret; 
  39   1      }
  40          
  41          /*
  42          把字符串src的cut_index_left+1到cut_index_right-1的部分复制给des 
  43          */
  44          void str_cut(char *des,char *src,int cut_index_left,int cut_index_right) 
  45          { 
  46   1          int i=0,j=0;
  47   1          for(i = cut_index_left+1;i<cut_index_right;i++)
  48   1          { 
  49   2            des[j++] = src[i];
  50   2          } 
  51   1          des[j++] = '\0';
  52   1      }
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 2   

  53          
  54          void str_remove_char(char *des,char ch_remove) 
  55          {
  56   1        int i;
  57   1        int new_des_len = 0;
  58   1        int des_len = strlen(des);
  59   1        char new_des[EQUATION_MAX_LEN];
  60   1        for(i=0;i<des_len;i++)
  61   1        {
  62   2          if(des[i]!=ch_remove)
  63   2          {
  64   3            new_des[new_des_len++] = des[i];
  65   3          }
  66   2        }
  67   1        new_des[new_des_len++] = '\0';
  68   1      
  69   1        for(i=0;i<new_des_len;i++) 
  70   1        {
  71   2          des[i] = new_des[i];
  72   2        }
  73   1      } 
  74          
  75          /*
  76          在index的前面新增一个字符 
  77          */
  78          void str_add_char(char *des,char ch_add,int index) 
  79          {
  80   1        int len_des = strlen(des);
  81   1        int i=0;
  82   1        for(i=len_des;i>=index;i--)
  83   1        {
  84   2          des[i+1]=des[i];
  85   2        }
  86   1        des[index] = ch_add;
  87   1      }
  88          
  89          /* 
  90          把字符串src粘贴到des的cut_index_left+1到cut_index_right-1部分 
  91          is_del = 1;删除处于cut_index_left和cut_index_right的字符。 
  92          */
  93          #define CHAR_REMOVE     '#'
  94          void str_paste(char *des,char *src,int paste_index_left,int paste_index_right,int is_del) 
  95          { 
  96   1          int i=0,j=0;
  97   1          int len_src = strlen(src);
  98   1          int len_des = strlen(des);
  99   1          int len_des_cut = paste_index_right - paste_index_left - 1;
 100   1          int des_move = len_src - len_des_cut; 
 101   1          char ch_remove = CHAR_REMOVE;
 102   1      
 103   1          if(is_del == 1) 
 104   1          {
 105   2            des[paste_index_left] = ch_remove; 
 106   2            des[paste_index_right] = ch_remove; 
 107   2          }
 108   1      
 109   1          if(des_move > 0)
 110   1          {
 111   2            for(i=len_des;i>=paste_index_right;i--) 
 112   2            {
 113   3              des[i + des_move] = des[i]; 
 114   3            }
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 3   

 115   2          }
 116   1          if(des_move < 0) 
 117   1          {
 118   2            for(i=paste_index_right;i<=len_des;i++) 
 119   2            {
 120   3              des[i + des_move] = des[i]; 
 121   3            }
 122   2          }
 123   1      
 124   1          for(i=0;i<len_src;i++) 
 125   1          {
 126   2            des[paste_index_left+ 1 + i] = src[i]; 
 127   2          }
 128   1      
 129   1          if(is_del == 1) 
 130   1          {
 131   2              str_remove_char( des, ch_remove );  
 132   2          }
 133   1        
 134   1      } 
 135          
 136          #define OPA_ADD   '+'
 137          #define OPA_SUB   '~'
 138          #define OPA_MUL   '*'
 139          #define OPA_DIV   '/'
 140          #define OPA_ENDRT '('
 141          #define OPA_END   ')'
 142          
 143          typedef struct  st_opa_index 
 144          {
 145            int opa_pre;
 146            int opa_cur;
 147            int opa_next;
 148          }st_opa_index;
 149          
 150          int char_is_opa(char ch)
 151          {
 152   1        if( ch == OPA_ADD
 153   1          ||ch == OPA_SUB
 154   1          ||ch == OPA_MUL
 155   1          ||ch == OPA_DIV
 156   1          ||ch == OPA_ENDRT
 157   1          ||ch == OPA_END)
 158   1          {
 159   2            return 1;
 160   2          }
 161   1          else
 162   1          {
 163   2            return 0;
 164   2          }
 165   1      }
 166          
 167          /*
 168              计算形如1/2,1+2这样的最简表达式。
 169              由于存在0.123456789...这样的小数计算困难的问题(小数有效位有限).
 170              后续改成基于字符串的计算.
 171          
 172          */
 173          void cal_single_equation(char *equation) 
 174          {
 175   1          int     len_equ = strlen(equation);
 176   1          char    opa = 0;
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 4   

 177   1          char    Num1[NUM_MAX_LEN]; 
 178   1          char    Num2[NUM_MAX_LEN]; 
 179   1          float   f_Num1=0;
 180   1          float   f_Num2=0;
 181   1          float   f_result=0;
 182   1          int     i = 0,j = 0;
 183   1          int     opa_index = 0;
 184   1      
 185   1          for(i=0;i<len_equ;i++)
 186   1          {
 187   2            if(char_is_opa(equation[i]) == 1)
 188   2            {
 189   3                opa = equation[i];
 190   3                opa_index = i;
 191   3                break;
 192   3            }
 193   2          }
 194   1      
 195   1          j=0;
 196   1          for(i=0;i<opa_index;i++)
 197   1          {
 198   2            Num1[j++] = equation[i];
 199   2          }
 200   1          Num1[j++] = '\0';
 201   1      
 202   1          j=0;
 203   1          for(i=opa_index + 1;i<len_equ;i++)
 204   1          {
 205   2            Num2[j++] = equation[i];
 206   2          }
 207   1          Num2[j++] = '\0';
 208   1      
 209   1          f_Num1 = atof(Num1);
 210   1          f_Num2 = atof(Num2);
 211   1          switch(opa)
 212   1          {
 213   2            case OPA_ADD:f_result = f_Num1 + f_Num2;break;
 214   2            case OPA_SUB:f_result = f_Num1 - f_Num2;break;
 215   2            case OPA_MUL:f_result = f_Num1 * f_Num2;break;
 216   2            case OPA_DIV:f_result = f_Num1 / f_Num2;break;
 217   2            default:break;
 218   2          }
 219   1          sprintf(equation,"%f",f_result);
 220   1      }
 221          
 222          int char_is_have(char *equation,char ch1,char ch2)
 223          {
 224   1        int len = strlen(equation); 
 225   1        int i;
 226   1        
 227   1        for(i=0;i<len;i++)
 228   1        { 
 229   2          if(equation[i] == ch1 || equation[i] == ch2)
 230   2          {
 231   3            return 1;
 232   3          }
 233   2        }
 234   1        return 0;
 235   1      }
 236          
 237          /* 
 238          从字符串的index_start 到index_end搜索(包括index_start和index_end)，看有没有ch字符。 
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 5   

 239          允许index_start < index_end，这样就表示反向搜索。 
 240          其中,ch还有一些特定含义。 
 241          比如ch = CHAR_FIND_OPA时，表示搜索属于操作符的字符，而不具体是某个字符。 
 242          */ 
 243          #define CHAR_FIND_OPA  0
 244          int char_find_instr(char *equation,int index_start,int index_end,char ch1,char ch2) 
 245          {
 246   1        int i=0;
 247   1        int ret = -1;
 248   1        if(index_start <= index_end)
 249   1        { 
 250   2          for(i=index_start;i<=index_end;i++)
 251   2          {
 252   3            if(ch1 == CHAR_FIND_OPA && ch2 == CHAR_FIND_OPA)
 253   3            {
 254   4                if(char_is_opa(equation[i]))
 255   4                { 
 256   5                  return i;
 257   5                }
 258   4            }
 259   3            else
 260   3            {
 261   4               if(equation[i] == ch1 || equation[i] == ch2)
 262   4              {
 263   5               // ret = i;
 264   5             return i;
 265   5              }
 266   4            }
 267   3          }
 268   2        } 
 269   1        else
 270   1        {
 271   2          for(i=index_start;i>=index_end;i--)
 272   2          {
 273   3            if(ch1 == CHAR_FIND_OPA && ch2 == CHAR_FIND_OPA)
 274   3            {
 275   4                if(char_is_opa(equation[i]))
 276   4                {
 277   5                  return i;
 278   5                }
 279   4            }
 280   3            else
 281   3            {
 282   4              if(equation[i] == ch1 || equation[i] == ch2) 
 283   4              {
 284   5               // ret = i;
 285   5            return i;
 286   5              }
 287   4            }
 288   3          }
 289   2        }
 290   1        return ret;
 291   1      }
 292          
 293          //1+2*3/4
 294          void cal_basic_equation(char *equation) 
 295          {
 296   1        int i =0;
 297   1        st_opa_index opa_capture;
 298   1        int len_equation = strlen(equation);
 299   1        char singel_eqution[EQUATION_MAX_LEN];
 300   1        float signel_result = 0;
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 6   

 301   1        char opa1 = OPA_MUL,opa2 = OPA_DIV;
 302   1      
 303   1          
 304   1      
 305   1        while(1)
 306   1        {
 307   2          
 308   2          while(char_is_have(equation,opa1,opa2) == 1)
 309   2          { 
 310   3              len_equation = strlen(equation);
 311   3              opa_capture.opa_cur = char_find_instr(equation,0,len_equation,opa1,opa2);
 312   3      
 313   3              opa_capture.opa_pre = char_find_instr(equation,opa_capture.opa_cur-1,0,CHAR_FIND_OPA,CHAR_FIND_OPA
             -);
 314   3              opa_capture.opa_next = char_find_instr(equation,opa_capture.opa_cur+1,len_equation,CHAR_FIND_OPA,C
             -HAR_FIND_OPA);
 315   3      
 316   3              str_cut(singel_eqution,equation,opa_capture.opa_pre,opa_capture.opa_next);
 317   3          
 318   3              cal_single_equation(singel_eqution);
 319   3              str_paste(equation,singel_eqution,opa_capture.opa_pre,opa_capture.opa_next,0);
 320   3          } 
 321   2        if(opa1 == OPA_ADD && opa2 == OPA_SUB)
 322   2        {
 323   3          break;
 324   3        }
 325   2          if(opa1 == OPA_MUL && opa2 == OPA_DIV)
 326   2        {
 327   3          opa1 = OPA_ADD;
 328   3          opa2 = OPA_SUB;
 329   3        }
 330   2        
 331   2       
 332   2        }
 333   1        str_remove_char(equation,OPA_END);
 334   1        str_remove_char(equation,OPA_ENDRT);
 335   1      } 
 336          
 337          //(1+2*(2-3))
 338          void cal_equation(char *equation)
 339          { 
 340   1        char result[EQUATION_MAX_LEN];
 341   1        int len_result;
 342   1        st_bracket_index st_bracket_index_data;
 343   1      
 344   1        while(char_find_instr(equation,0,strlen(equation),CHAR_FIND_OPA,CHAR_FIND_OPA)!=-1)
 345   1        {
 346   2          printf("cal_equation:%s\n",equation);
 347   2      
 348   2          st_bracket_index_data = search_inlayer_left_bracket(equation);
 349   2          str_cut(result,equation,st_bracket_index_data.left_bracket_index,st_bracket_index_data.right_bracket_i
             -ndex);
 350   2      
 351   2          str_add_char(result,OPA_END,0);
 352   2          str_add_char(result,OPA_ENDRT,strlen(result));
 353   2          cal_basic_equation(result);
 354   2          str_remove_char(result,OPA_END);
 355   2          str_remove_char(result,OPA_ENDRT);
 356   2      
 357   2          str_paste(equation,result,st_bracket_index_data.left_bracket_index,st_bracket_index_data.right_bracket
             -_index,1);
 358   2        }
C51 COMPILER V9.54   CALCULATE                                                             12/17/2021 09:53:18 PAGE 7   

 359   1      }
*** WARNING C280 IN LINE 341 OF ..\Calu\calculate.c: 'len_result': unreferenced local variable
 360          
 361          //int main(void)
 362          //{
 363          //  char equation[EQUATION_MAX_LEN] = "(1+2/(2*(1/3)))"; 
 364          //  cal_equation( equation); 
 365          //  printf("equation:%s\n",equation); 
 366          //  getchar();
 367          
 368          //  return 0;
 369          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2479    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----     466
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
